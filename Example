//h
#pragma once

class A
{
	int a = 0;
public:
	//A() = delete;
	A() = default;
	//A(A const &) = default;
	A& operator = (A&) = delete;
	A(int a) : a(a)
	{
		
	};
};

class Logger
{
private:
	static Logger* g_instance;
	Logger();

public:
	void Log(char const* msg);
	Logger(Logger const&) = delete;
	Logger& operator=(Logger&) = delete;

	static Logger* GetInstance();
};

//cpp
#include"Example.h"
#include <iostream>

Logger* Logger::g_instance = 0;

Logger::Logger()
{
	std::cout << "Logger created\n";
}

Logger* Logger::GetInstance()
{
	if (!g_instance)
	{
		g_instance = new Logger();
	}
	return g_instance;
}

void Logger::Log(char const* msg)
{
	std::cout << msg << "\n";
}
//main
#include "Student.h"
#include <iostream>
#include "Example.h"
//void PrintMaxRaiting(Student s1, Student s2)
//{
//	std::cout << (s1.GetRating() < s2.GetRating() ?
//		s2.GetRating() : s1.GetRating()) << "\n";
//}
//
//Student Create(Group& g, char const* name)
//{
//	Student s(g, name, 0);
//	return s;
//}

int main()
{
	/*A a1(100);
	B b1(a1);
	Student s1(g, "Ivanov", 6);
	Student s2 = s1;
	Student s3(s1);
	s2.SetName("Petrov");
	s2.SetRating(5);
	s1.Print();
	s2.Print();
	PrintMaxRaiting(s1, s2);
	Student s4 = Create(g,"Sidorov");
	s4.Print();
	*void PrintMaxRaiting(Student s1, Student s2)
	{
		std::cout << (s1.GetRating() < s2.GetRating() ?
			s2.GetRating() : s1.GetRating()) << "\n";
	}

	Student Create(Group& g, char const* name)
	{
		Student s(g, name, 0);
		return s;
	}

	int count;
	std::cin >> count;
	Student** students = new Student*[count];
	for (int i = 0; i < count; ++i)
	{
		Student* st = new Student(g);
		students[i] = st;
	}

	students[0]->*/
	//Group g;
	//Student s1(g, "Ivanov", 6);
	//Student s2 = s1;
	//Student s3(s1);

	//std::cout << "count = " << Student::GetStudentCount() << "\n";

	//s2.SetName("Petrov");
	//s2.SetRating(5);
	//s1.Print();
	//s2.Print();

	//PrintMaxRaiting(s1, s2);
	//Student* s5;
	//{
	//	s5 = new Student(g);
	//	Student s4 = Create(g, "Sidorov");
	//	s4.Print();
	//	std::cout << "count = " << Student::GetStudentCount() << "\n";
	//}
	//std::cout << "count = " << Student::GetStudentCount() << "\n";
	//delete s5;
	//std::cout << "count = " << Student::GetStudentCount() << "\n";
	

	A a(1);
	Logger::GetInstance()->Log("hello");
	Logger::GetInstance()->Log("world!");
	return 0;
}
