//main.cpp
/*class Greater
{
	T m_value;
public:
	Greater() = default;
	Greater(T value) : m_value(value)
	{
	};

	bool operator()(T const& value) const
	{
		return m_value < value;
	}
};*/
class Compare
{
	int m_value;
public:
	Compare() = default;
	Compare(int value) :m_value(value)
	{

	};
	bool operator()(int const& value) const
	{
		return m_value == value;
	}
};
typedef bool(*CompareFunc)(int const&);

bool CompareWith5(int const& value)
{
	return value == 5;

}

bool GreaterThan5(int const& value)
{
	return value > 5;
}

int* Find(int* array, int count,CompareFunc compare// Compare compare)
{
	for (int i = 0; i < count; i++)
	{
		if ((*compare)(array[i]))
		{
			return array + i;
		}
	}
	return nullptr;
}
/*template<class T,class Pred>
T* Find(T* array, int count, Pred compare)
{
	for (int i = 0; i < count; i++)
	{
		if ((compare)array[i])
		{
			return array + i;
		}
	}
	return nullptr;
}*/
//int main()
  int a = 5;
	int b = 6;
	Compare cmp(5);
	if (cmp(a))
	{
		std::cout << "true\n";
	}
	else
	{
		std::cout << "false\n";
	}
	if (cmp(b))
	{
		std::cout << "true\n";
	}
	else
	{
		std::cout << "false\n";
	}

	int arr[] = { 1,10,5,6,7 };
	int* result = Find(arr, 5, GreaterThan5);
	if (result)
	{
		std::cout << *result << "\n";
	}
-----------------------------
template<class T>
class Compare
{
	T m_value;
public:
	Compare() = default;
	Compare(T value) : m_value(value)
	{
	};

	bool operator()(T const& value) const
	{
		return m_value == value;
	}
};

typedef bool(*CompareFunc)(int const&);

bool CompareWith5(int const& value)
{
	return value == 5;
}

bool GreaterThan5(int const& value)
{
	return value > 5;
}

template<class T1, class Pred>
T1* Find(T1* array, int count, Pred compare)
{
	for (int i = 0; i < count; i++)
	{
		if (compare(array[i]))
		{
			return array + i;
		}
	}
	return nullptr;
}

int main()
{
	int a = 5, b = 6;

	int arr[] = { 1, 10, 5, 6, 7 };
	Compare<int> cmp(5);
	Compare<int> cmp1(3);
	int* result = Find(arr, 5, cmp1);
	if (result)
	{
		std::cout << *result << "\n";
	}

	return 0;
}
-------------------------------------------------
template<class T>
class GreaterFromTwo
{
public:
	GreaterFromTwo() = default;

	bool operator()(T const& value1,
		T const& value2) const
	{
		return value1 > value2;
	}
};


GreaterFromTwo<int> greaterFromTwo;
	BubbleSort(arr, 5, greaterFromTwo);
---------------------------------------------
void plus(int& a, int b = 5)
{
	a += b;
}
int a = 1;
	plus(a, 2);
	plus(a);
---------------------------
template<class T, class Pred = GreaterFromTwo<T> >
void BubbleSort(T* arr, int count, Pred compare = GreaterFromTwo<T>())
BubbleSort(arr, 5);
-----------------------------
class GreaterFromTwoStudentByRating
{
public:
	GreaterFromTwoStudentByRating() = default;

	bool operator()(Student const& value1,
		Student const& value2) const
	{
		return value1.GetRating() > value2.GetRating();
	}
};
	BubbleSort(studArray, 2, GreaterFromTwoStudentByRating());
----------------------------------------
