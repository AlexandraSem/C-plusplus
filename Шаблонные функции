#include "String.h"
#include <iostream>
#include <memory>


template<class T>
void BubbleSort(T* arr, int count)
{
	for (int i = count - 1; i > 0; --i)
	{
		for (int j = 0; j < i; ++j)
		{
			if (arr[j] > arr[j + 1])
			{
				// swap(arr[j], arr[j + 1]);
				
				//копирование
				T tmp = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = tmp;
				// перемещение
				T tmp = std::move(arr[j]);;
				arr[j] = std::move(arr[j + 1]);
				arr[j + 1] = std::move(tmp);
			}
		}
	}
}

int main()
{
	double arr1[] = { 4.3, 2.5, 45.3, 30.1, 4.2 };
	int arr2[] = { 4, 1, 10, 7, 8 };
	String arr3[] = { "dfgdf", "adasd", "ghgh", "bbf", "cdfd" };

	BubbleSort(arr2, 5);
	for (int i = 0; i < 5; ++i)
	{
		std::cout << arr2[i] << " ";
	}
	std::cout << "\n";

	return 0;
}
-----------------------------
//main
	Student arr4[] = { Student("Petrov", 5), Student("Ivanov", 7) };
	BubbleSort(arr4, 2);
	for (int i = 0; i < 2; ++i)
	{
		arr4[i].Print();
//cpp & h
bool Student::operator>(Student const& rhs) const

{
	return m_name > rhs.m_name;
}
-----------------------------------
//main
template<class T1,class T2>
bool Greater(T1 const& a, T2 const& b)
{
	return a > (T1)b;
}
bool Greater(int const& a, double const& b)
{
	return (double)a > b;
}

template<class T>
T* Find(T* arr,int count, T  const& element)
{
	for (int i = 0; i < count; ++i)
	{
		if (arr[i] == element)
		{
			return arr + i;
		}
	}
	return nullptr;
}
template<class T>
T Average(T* arr, int count)
{
	T alisa = 0;
	for (int i = 0; i < count; i++)
	{
		alisa += arr[i];
	}
	return alisa / count;
}
//cpp
std::cout << Average(arr1, 5);
----------------------------------
//before main
template<class T, int N>
class Array
{
private:
	T m_array[N];

public:
	Array();

	template<class T1, int N1>
	Array(const Array<T1, N1>& array);
};

template<class T, int N>
Array<T,N>::Array()
{
	memset(m_array,0,N);
}
//main
Array<double, 10> arr;
	Array<int, 11>arr9;
	Array<double, 10>arr8 = arr9;
